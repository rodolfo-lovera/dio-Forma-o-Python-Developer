# -*- coding: utf-8 -*-
"""DesafioPythonPanda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P1gj1Y0dNKnSJQe-mNQvnbrUbmwsLha_

1.   Importação das bibliotecas que serã utilizadas
  *   Pandas
  *   Matplotlib

2.   Upload do arquivo com a Base de dados
  *   fonte do arquivo: https://github.com/microsoft/powerbi-desktop-samples/tree/main/AdventureWorks%20Sales%20Sample

3.   Criação do Dataframe
"""

# importando as bibliotecas
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use("seaborn")

#upload do arquivo -
from google.colab import files
arq = files.upload()

# Criando o Data Frame
df = pd.read_excel("AdventureWorks.xlsx")

# visualizando 10 linhas aleatórias
df.sample(5)

# verificando os tipos de dados das colunas
df.dtypes

# Tamanho de linhas e colunas da base
df.shape

"""4.   Calculos de custos, receitas e lucro"""

# qual é a receita total
round(df["Valor Venda"].sum(),2)

# Qual é o custo total - Criando nova coluna
df["custo"] = df["Custo Unitário"].mul(df["Quantidade"])

df.sample(6)

# Qual é o custo total?
round(df['custo'].sum(),2)

# Qual é o lucro? Criando nova coluna com base nas colunas Receita - Custo
df["Lucro"] = df["Valor Venda"] - df["custo"]

df.sample(6)

# Total de Lucro
round(df["Lucro"].sum(),2)

"""5.   Manipulação de datas"""

# Criando coluna com tolta de dias para enviar o produto
df["Tempo_envio"] = df["Data Envio"] - df['Data Venda']
df.sample(4)

"""Calcular a média de tempo de envia para cada marca

1.   Item da lista
2.   Item da lista


"""

# é necessário extrair apenas os dias na coluna "Tempo Envio"
df["Tempo_envio"] = (df["Data Envio"] - df["Data Venda"]).dt.days
df.sample(4)

# veridicando os tipos de dados das colunas
df.dtypes

# Calculando a média de tempo de envio por Marca
df.groupby("Marca")["Tempo_envio"].mean()

# Verificação de valores ausentes
df.isnull().sum()

"""6.   Calculo de lucro por agrupamento
  *   Lucro por marca
  
"""

#1. Agrupar por ano e marca
pd.options.display.float_format = '{:20,.2f}'.format # Formatando o valor para não mostrar notação científica
df.groupby([df["Data Venda"].dt.year, "Marca"])["Lucro"].sum()

# armazenando os dados do agrupamento para uma tabela - reset_index
lucro_ano = df.groupby([df["Data Venda"].dt.year, "Marca"])["Lucro"].sum().reset_index()
lucro_ano

# Qual o total de produtos vendidos?
df.groupby("Produto")["Quantidade"].sum().sort_values(ascending=False)

# Gráfico com o Total de produtos vendidos
df.groupby("Produto")["Quantidade"].sum().sort_values(ascending=True).plot.barh(title="Total Produtos Vendidos")
plt.xlabel("Total")
plt.ylabel("Produto");

# Gráfico de lucro por ano
df.groupby(df["Data Venda"].dt.year)["Lucro"].sum().plot.bar(title="Lucro x Ano")
plt.xlabel("Ano")
plt.ylabel("Receita");

"""7.   Analise das vendas de 2009"""

# realizando filtro dos dados para o ano de 2009
df_2009 = df[df["Data Venda"].dt.year == 2009]
df_2009.sample(4)

# Gráfico para visualização de lucro por mês
df_2009.groupby(df_2009["Data Venda"].dt.month)['Lucro'].sum().plot(title="Lucro x Mês")
plt.xlabel("Mês")
plt.ylabel("Lucro");

# Grafico de lucro por marca
df_2009.groupby("Marca")["Lucro"].sum().plot.bar(title="Lucro x Marca")
plt.xlabel("Marca")
plt.ylabel("Lucro")
plt.xticks(rotation='horizontal'); # Legenda do eixo x na horizontal

# Gráfico para lucro por classe
df_2009.groupby("Classe")["Lucro"].sum().plot.bar(title="Lucro x Classe")
plt.xlabel("Classe")
plt.ylabel("Lucro")
plt.xticks(rotation="horizontal")

"""8.  Análise estatística de Tempo"""

# Análise estatística
df['Tempo_envio'].describe()

# Grafico de boxplot
plt.boxplot(df["Tempo_envio"]);

# Histograma
plt.hist(df["Tempo_envio"])

# Tempo mínimo de envio
df["Tempo_envio"].min()

# Tempo máximo de envio
df["Tempo_envio"].max()

# Identificado o Outlier
df[df["Tempo_envio"] == 20]